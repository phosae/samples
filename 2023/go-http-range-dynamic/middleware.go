package main

import (
	"bytes"
	"fmt"
	"io"
	"net/http"
	"strings"
	"time"
)

func withLog(ha func(w http.ResponseWriter, r *http.Request)) func(w http.ResponseWriter, r *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		start := time.Now()

		fmt.Println()
		fmt.Println("------ request ------")
		fmt.Println(r.Method, r.URL)
		for k, v := range r.Header {
			if k != "Range" {
				continue
			}
			fmt.Printf("%s: %s\n", k, v)
		}

		var buf bytes.Buffer
		ww := &basicWriter{ResponseWriter: w, tee: &buf}
		ha(ww, r)

		fmt.Println("------Response------")
		fmt.Printf("StatusCode: %d\n", ww.code)
		for k, v := range ww.Header() {
			if !strings.Contains(k, "Range") {
				continue
			}
			fmt.Printf("%s: %s\n", k, v)
		}
		elapsed := time.Since(start)
		lenInMB := float64(ww.bytes) / float64(1024*1024)
		fmt.Printf("Content-Length: %s\n", ww.Header().Get("Content-Length"))
		fmt.Printf("Written MBytes: %.2fMB\n", lenInMB)
		fmt.Println("cost:", elapsed.Milliseconds(), "ms")
		fmt.Println()
	}
}

// basicWriter wraps a http.ResponseWriter that implements the minimal
// http.ResponseWriter interface.
// ported from go-chi
type basicWriter struct {
	http.ResponseWriter
	wroteHeader bool
	code        int
	bytes       int
	tee         io.Writer
}

func (b *basicWriter) WriteHeader(code int) {
	if !b.wroteHeader {
		b.code = code
		b.wroteHeader = true
		b.ResponseWriter.WriteHeader(code)
	}
}

func (b *basicWriter) Write(buf []byte) (int, error) {
	b.maybeWriteHeader()
	n, err := b.ResponseWriter.Write(buf)
	if b.tee != nil {
		_, err2 := b.tee.Write(buf[:n])
		// Prefer errors generated by the proxied writer.
		if err == nil {
			err = err2
		}
	}
	b.bytes += n
	if err != nil {
		fmt.Printf("err writing response: %s\n", err)
	}
	return n, err
}

func (b *basicWriter) maybeWriteHeader() {
	if !b.wroteHeader {
		b.WriteHeader(http.StatusOK)
	}
}

func (b *basicWriter) Status() int {
	return b.code
}

func (b *basicWriter) BytesWritten() int {
	return b.bytes
}

func (b *basicWriter) Tee(w io.Writer) {
	b.tee = w
}

func (b *basicWriter) Unwrap() http.ResponseWriter {
	return b.ResponseWriter
}
